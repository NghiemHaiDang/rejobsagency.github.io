@mixin box-size($background, $padding-top,$padding-bottom){
    background: $background;
    padding-top: $padding-top;
    padding-bottom: $padding-bottom;
}

// Button
// -------------------------
@mixin button-theme-base($height,$font-size,$color,$hover-color,$bg-color,$bg-hover-color,$border-color,$padding) {
  outline: none;
  cursor: pointer;  
  position: relative;
  background: $bg-color;
  border: 2px solid $border-color;
  color: $color;
  font-size: $font-size;
  letter-spacing: 0;
  padding: $padding;
  text-transform: capitalize;  
  text-decoration: none;   
  font-weight: 500;
  line-height: $line-height-base;
  @include transition($linear);
  @include box-sizing(border-box);
  @include border-radius(50px);
  @include box-shadow(none);
  @include text-shadow(none);   
  @include hover-focus-active() {       
    color: $theme-color;
    background-color: $bg-hover-color;
    border-color: $bg-hover-color;
  }
  &:visited{ 
    text-decoration: none;
  } 
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    cursor: not-allowed;
    pointer-events: none;    
    border-color: lighten($bg-color, 5%);
    background-color: lighten($bg-color, 5%);
    @include box-shadow(none);
  }
  @include hover-focus-active(){
    color: $hover-color;
    background-color: $bg-hover-color;
    @include box-shadow(none);
  }
}
// Input - Form
// -------------------------
@mixin input-theme-base($bg-color,$border-color,$text-color) {
  outline: none;
  cursor: auto;
  color: $input-color-placeholder;
  background-color: $bg-color;
  border: solid 1px $border-color;    
  height: 46px;
  padding: 6px 15px;
  filter: none;   
  font-size: 16px;
  font-weight: 400;
  text-transform: none;
  -webkit-backface-visibility: hidden;
  @include box-sizing(border-box);
  @include transition($linear); 
  @include border-radius(3px);  
  @include box-shadow(none);  
  @include appearance(none);    
  @include placeholder-input($input-color-placeholder,none); 
  &:-moz-autofill, 
  &:-moz-autofill-preview {
    filter: grayscale(21%) brightness(88%) contrast(161%) invert(10%) sepia(40%) saturate(206%);
  }
  &:focus{
    @include box-shadow(none);
  }
  &:required,
  &:optional,
  &:invalid{    
    @include box-shadow(none);
  }   
  @include hover-focus-active() {
    border-color: $theme-color;   
    background-color: $white;
  } 
}
// Headings - Typo
// -------------------------
@mixin headings-theme-base($font-size:30px,$margin-bottom:30px,$transform:none) {    
  padding: 0;  
  margin: 0;
  position: relative;            
  text-transform: $transform;
  color: $headings-color;
  font-family: $headings-font-family;    
  font-weight: $headings-font-weight;      
  font-size: $font-size;   
  margin-bottom: $margin-bottom;
  line-height: $font-size + 10;  
}
// Icon Fonts
// -------------------------
@mixin FontAwesome() {
  display: inline-block;  
  font: normal normal normal 14px/1 FontAwesome;
  font-size: inherit;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin themify($content) {
    content: $content;
    font-family: 'themify';
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

@mixin et-line($content) {
  content: $content;
  font-family: 'et-line';
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display:inline-block;
}

@mixin flaticon($content) {
  content: $content;
  display: inline-block;
  font-family: "Flaticon";
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  line-height: 1;
  text-decoration: inherit;
  text-rendering: optimizeLegibility;
  text-transform: none;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-smoothing: antialiased;
}

//== Media Query
//==========================================
@mixin media( $res ) {  
  @if tinyphones == $res {
    @media only screen and (min-width: $mobile_width_tinyphones) {
      @content;
    }
  }
  
  @if smartphones == $res {
    @media only screen and (min-width: $mobile_width_smartphones) {
      @content;
    }
  }

  @if mobile == $res {
    @media only screen and (min-width: $mobile_width) {
      @content;
    }
  }

  @if tablet == $res {
    @media only screen and (min-width: $tablet_width) {
      @content;
    }
  }

  @if desktop == $res {
    @media only screen and (min-width: $desktop_width) {
      @content;
    }
  }

  @if wide == $res {
    @media only screen and (min-width: $wide_width) {
      @content;
    }
  }
}

//== Inline block
//==========================================
@mixin inline-block ($haslayout : true){
    display: inline-block;
    vertical-align: middle;
    @if $haslayout == true {
        .lt-ie8 & {
            display: inline;
            zoom: 1;
        }
    }
}

//== Hover - Focus - Active
//==========================================
@mixin hover {
  &:hover {
    @content;
  }  
}

@mixin hover-active {
  &:hover {
    @content;
  }
  &:active {
    @content;
  }
}

@mixin hover-focus {
  &:hover {
    @content;
  }
  &:focus {
    @content;
  }
  &:focus-within {
    @content;
  }  
}

@mixin hover-focus-active {
  &:hover {
    @content;
  }
  &:focus {
    @content;
  }
  &:focus-within {
    @content;
  }  
  &:active {
    @content;
  }
}

//== vertical block
//==========================================
@mixin vertical-center( $width: 100px, $height: 100px) {
    left: 0;
    right: 0;
    bottom: 0;
    top: 0;
    margin: auto;
    width: $width;
    height: $height;
    position: absolute;
}

@mixin vertical-align($position: relative) {
    position: $position;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    transform: translateY(-50%);
}

@mixin center-align($position: relative) {
    position: $position;
    left: 50% !important;
    right: auto !important;
    -webkit-transform: translateX(-50%);
    -moz-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translateX(-50%);
}

@mixin center-box($position: relative) {    
    top: 50%;
    left: 50%;
    position: $position;
    -webkit-transform: translate(-50%,-50%);
    -ms-transform: translate(-50%,-50%);
    -moz-transform: translate(-50%,-50%);
    transform: translate(-50%,-50%);
}

// Center block
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Placeholder text
@mixin placeholder-input($color: $input-color-placeholder,$transform: initial) {
  &::-moz-placeholder{ 
    color: $color;
    opacity: 1;
    text-transform: $transform;
  }
  &:-ms-input-placeholder{ 
    color: $color; 
    text-transform: $transform;
  }
  &::-webkit-input-placeholder{ 
    color: $color; 
    text-transform: $transform;
  }
}

//== Translate X - Y - Z
//==========================================
@mixin translateX($x) {
    -webkit-transform: translateX($x);
    -ms-transform: translateX($x); // IE9 only
    -o-transform: translateX($x);
    transform: translateX($x);
}

@mixin translateY($y) {
    -webkit-transform: translateY($y);
    -ms-transform: translateY($y); // IE9 only
    -o-transform: translateY($y);
    transform: translateY($y);
}

@mixin translateZ($z) {
    -webkit-transform: translateZ($z);
    -ms-transform: translateZ($z); // IE9 only
    -o-transform: translateZ($z);
    transform: translateZ($z);
}

//== Transform
//==========================================
@mixin transform($argument){
    -webkit-transform: ($argument);
    -moz-transform: ($argument);
    -ms-transform: ($argument);
    -o-transform: ($argument);
    transform: ($argument);
}

//== Transform
//==========================================
@mixin transition-delay($time1,$time2){
    -webkit-transition-delay: ($time1,$time2);
    -moz-transition-delay: ($time1,$time2);
    -ms-transition-delay: ($time1,$time2);
    -o-transition-delay: ($time1,$time2);
    transition-delay: ($time1,$time2);
}

//== Background Size
//==========================================
@mixin background-size($size1,$size2) {
    -webkit-background-size: ($size1,$size2);
    -moz-background-size: ($size1,$size2);
    -ms-background-size: ($size1,$size2);
    -o-background-size: ($size1,$size2);
    background-size: ($size1,$size2);
}

//== Background origin
//==========================================
@mixin background-origin($value1,$value2){
    -webkit-background-origin: ($value1,$value2);
    -moz-background-origin: ($value1,$value2);
    -ms-background-origin: ($value1,$value2);
    -o-background-origin: ($value1,$value2);
    background-origin: ($value1,$value2);
}

//== Border radius
//==========================================
@mixin border-radius($radius) {
    border-radius         : $radius;
    -webkit-border-radius : $radius;
    -moz-border-radius    : $radius;
    -ms-border-radius     : $radius;
    -o-border-radius      : $radius;
}

@mixin border-radius-separate($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px) {
    -webkit-border-top-left-radius:     $topLeftRadius;
    -webkit-border-top-right-radius:    $topRightRadius;
    -webkit-border-bottom-right-radius: $bottomRightRadius;
    -webkit-border-bottom-left-radius:  $bottomLeftRadius;

    -moz-border-radius-topleft:     $topLeftRadius;
    -moz-border-radius-topright:    $topRightRadius;
    -moz-border-radius-bottomright: $bottomRightRadius;
    -moz-border-radius-bottomleft:  $bottomLeftRadius;

    border-top-left-radius:     $topLeftRadius;
    border-top-right-radius:    $topRightRadius;
    border-bottom-right-radius: $bottomRightRadius;
    border-bottom-left-radius:  $bottomLeftRadius;
}


//== Text Shadow
//==========================================
@mixin text-shadow($shadow) {
    text-shadow         : $shadow;
    -webkit-text-shadow : $shadow;
    -moz-text-shadow    : $shadow;
    -ms-text-shadow     : $shadow;
    -o-text-shadow      : $shadow;
}

//== Transform Origin
//==========================================
@mixin transform-origin($originX,$originY) {
    -webkit-transform-origin : $originX $originY;
    -moz-transform-origin    : $originX $originY;
    -ms-transform-origin     : $originX $originY; // IE9 only
    transform-origin         : $originX $originY;
}

//== appearance
//==========================================
@mixin appearance ($value) {
  -webkit-appearance: $value;
     -moz-appearance: $value;
        -ms-appearance: $value;
          appearance: $value;
}

//== selection
//==========================================
$prefixes: ("-moz-", "");
@mixin selection($color, $background) {
    @each $prefix in $prefixes {
        ::#{$prefix}selection {
            color: $color;
            background: $background;
        }
    }
}

//== animation fill mode
//==========================================
@mixin animation-fill-mode($fill) {
    -webkit-animation-fill-mode: $fill;
    -moz-animation-fill-mode: $fill;
    -o-animation-fill-mode: $fill;
    animation-fill-mode: $fill;
}

//== filter
//==========================================
@mixin filter($argument){
    filter         : $argument;
    -webkit-filter : $argument;
    -moz-filter    : $argument;
    -o-filter      : $argument;
    -ms-filter     : $argument;
}

// Clear Lists
// -------------------------
@mixin clear-list(){
    padding    : 0;
    margin     : 0;
    list-style : none;
}

// Formart lists widget
// -------------------------
@mixin lists-style() {
    ul,ol{
        @include clear-list();
        li{
            &:first-child{

            }
            &:last-child{
                border-bottom: 0;
                padding-bottom: 0;
            }
            .children{
                > li{
                    &:before{
                        top: 24px;
                    }
                }
            }
        }
        ul{
            li:first-child{
                padding-top: 14px;
                background-position: 0 24px;
            }
        }
    }
}


// Position mixin
//==========================================
// @param [string] $position: position type
// @param [list] $args: list of offsets and values
//==========================================
@mixin position($position, $args) {
    @each $o in top right bottom left {
        $i: index($args, $o);
        @if $i
            and $i + 1 <= length($args)
            and type-of( nth($args, $i + 1) ) == number {
            #{$o}: nth($args, $i + 1);
        }
    }
    position: $position;
}


// Absolute positioning mixin
//==========================================
// @param [list] $args: list of offsets and values
//==========================================
@mixin absolute($args) {
    @include position(absolute, $args);
}

// Arrow mixin
//==========================================
// @param [string] $direction: arrow direction
// @param [list] $position: list of offsets and values
// @param [color] $color (inherit): arrow color
// @param [number] $size (1em): arrow size
//==========================================
@mixin triangle($direction, $position, $color: currentColor, $size: 1em) {
    // Make sure the direction is valid
    @if not index(top right bottom left, $direction) {
        @warn "Direction must be one of top, right, bottom or left.";
    }

    @else {
        @include absolute($position); // Position
        @include square(0); // Size
        content: '';
        z-index: 2;

        border-#{opposite-position($direction)}: $size * 1.5 solid $color;
        $perpendicular-borders: $size solid transparent;

        @if $direction == top or $direction == bottom {
            border-left:   $perpendicular-borders;
            border-right:  $perpendicular-borders;
        }

        @else if $direction == right or $direction == left {
            border-bottom: $perpendicular-borders;
            border-top:    $perpendicular-borders;
        }
    }
}



//== Flexible Layout
//==========================================

@mixin flexbox {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
}

%flexbox {
    @include flexbox;
}

@mixin inline-flex {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -moz-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

%inline-flex {
    @include inline-flex;
}

@mixin flex-direction($value: row) {
    @if $value == row-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: horizontal;
    } @else if $value == column {
        -webkit-box-direction: normal;
        -webkit-box-orient: vertical;
    } @else if $value == column-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: vertical;
    } @else {
        -webkit-box-direction: normal;
        -webkit-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -moz-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
}
    // Shorter version:
    @mixin flex-dir($args...) { @include flex-direction($args...); }


@mixin flex-wrap($value: nowrap) {
    // No Webkit Box fallback.
    -webkit-flex-wrap: $value;
    -moz-flex-wrap: $value;
    @if $value == nowrap {
        -ms-flex-wrap: none;
    } @else { 
        -ms-flex-wrap: $value; 
    }
    flex-wrap: $value;
}

@mixin flex-flow($values: (row nowrap)) {
    // No Webkit Box fallback.
    -webkit-flex-flow: $values;
    -moz-flex-flow: $values;
    -ms-flex-flow: $values;
    flex-flow: $values;
}

@mixin order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
    -webkit-order: $int;
    -moz-order: $int;
    -ms-flex-order: $int;
    order: $int;
}

@mixin flex-grow($int: 0) {
    -webkit-box-flex: $int;
    -webkit-flex-grow: $int;
    -moz-flex-grow: $int;
    -ms-flex-positive: $int;
    flex-grow: $int;
}

@mixin flex-shrink($int: 1) {
    -webkit-flex-shrink: $int;
    -moz-flex-shrink: $int;
    -ms-flex-negative: $int;
    flex-shrink: $int;
}

@mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    -moz-flex-basis: $value;
    -ms-flex-preferred-size: $value;
    flex-basis: $value;
}

@mixin flex($fg: 1, $fs: null, $fb: null) {
    
    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;

    // Box-Flex only supports a flex-grow value so let's grab the
    // first item in the list and just return that.
    @if type-of($fg) == 'list' {
        $fg-boxflex: nth($fg, 1);
    }

    -webkit-box-flex: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -moz-box-flex: $fg-boxflex;
    -moz-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
}

@mixin justify-content($value: flex-start) {
    @if $value == flex-start {
        -webkit-box-pack: start;
        -ms-flex-pack: start;
    } @else if $value == flex-end {
        -webkit-box-pack: end;
        -ms-flex-pack: end;
    } @else if $value == space-between {
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
    } @else if $value == space-around {
        -ms-flex-pack: distribute;      
    } @else {
        -webkit-box-pack: $value;
        -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
    -moz-justify-content: $value;
    justify-content: $value;
}
    // Shorter version:
    @mixin flex-just($args...) { @include justify-content($args...); }

//----------------------------------------------------------------------

@mixin align-items($value: stretch) {
    @if $value == flex-start {
        -webkit-box-align: start;
        -ms-flex-align: start;
    } @else if $value == flex-end {
        -webkit-box-align: end;
        -ms-flex-align: end;
    } @else {
        -webkit-box-align: $value;
        -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    -moz-align-items: $value;
    align-items: $value;
}

@mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;
    -moz-align-self: $value;
    @if $value == flex-start {
        -ms-flex-item-align: start;
    } @else if $value == flex-end {
        -ms-flex-item-align: end;
    } @else {
        -ms-flex-item-align: $value;
    }
    align-self: $value;
}

// Flexbox Align Content

@mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;
    -moz-align-content: $value;
    @if $value == flex-start {
        -ms-flex-line-pack: start;
    } @else if $value == flex-end {
        -ms-flex-line-pack: end;
    } @else {
        -ms-flex-line-pack: $value;
    }
    align-content: $value;
}

@mixin display-grid {
  display: -ms-grid;
  display: grid;
}

// $columns values should be delimited by a space
@mixin grid-template-columns($columns...) {
  -ms-grid-columns: $columns;
  grid-template-columns: $columns;
}

// $rows values should be delimited by a space
@mixin grid-template-rows($rows...) {
  -ms-grid-rows: $rows;
  grid-template-rows: $rows;
}

// Can be used in combination with above grid-template-X mixins.
// These result in the same output:
// @include grid-template-columns(10px grid-repeat(4, 20px) 30px);
// @include grid-template-columns(10px 20px 20px 20px 20px 30px);
@function grid-repeat($repeat, $stuff: 1fr) {
  $list: ();
  @for $i from 1 through $repeat {
    $list: append($list, $stuff, space);
  }
  @return $list;
}

@mixin grid-column($col-start, $col-end) {
  -ms-grid-column: $col-start;
  -ms-grid-column-span: $col-end - $col-start;
  grid-column: #{$col-start} / #{$col-end};
}

@mixin grid-row($row-start, $row-end) {
  -ms-grid-row: $row-start;
  -ms-grid-row-span: $row-end - $row-start;
  grid-row: #{$row-start} / #{$row-end};
}

@mixin grid-align-self($value) {
  -ms-grid-row-align: $value;
  align-self: $value;
}

@mixin grid-justify-self($value) {
  -ms-grid-column-align: $value;
  justify-self: $value;
}

// Font size - rem
//==========================================

@function parseInt($n) {  
  @return $n / ($n * 0 + 1);
}

@mixin font-size($property, $values) {
  $px : ();  
  $rem: ();  

  @each $value in $values {  

      $unit: unit($value);     
      $val: parseInt($value);  

      @if $unit == "px" or $unit == "" {  
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }
      @if $unit == "rem" { 
        $px : append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
  }

 
  #{$property}: $px; 
 
}

@mixin loop-delay($item){
  @for $i from 1 through 10 {
    #{$item}:nth-child(2n+#{$i}) {
      -webkit-transition-delay:#{$i/10}s; /* Safari */
      transition-delay:#{$i/10}s;
    }
  }
}

@keyframes rotate_icon {
  100% {
    @include rotate(360deg);
  }
}
@-webkit-keyframes rotate_icon {
  100% {
    @include rotate(360deg);
  }
}
@keyframes scale_icon {
  form{
    @include scale(0.8);
  }
  to {
    @include scale(1);
  }
}
@-webkit-keyframes scale_icon {
  form{
    @include scale(0.8);
  }
  to {
    @include scale(1);
  }
}

@-webkit-keyframes slideIcon {
  0% { @include translateX(0); }
  50% { @include translateX(20px); }
  100% { @include translateX(0); } 
}

@keyframes slideIcon {
  0% { @include translateX(0); }
  50% { @include translateX(20px); }
  100% { @include translateX(0); } 
}

@-webkit-keyframes delay {
    0%, 40%, 100% {
        -webkit-transform: scaleY(0.05);
        transform: scaleY(0.05);
    }
    20% {
        -webkit-transform: scaleY(1);
        transform: scaleY(1);
    }
}
@keyframes delay {
    0%, 40%, 100% {
        transform: scaleY(0.05);
        -webkit-transform: scaleY(0.05);
    }
    20% {
        transform: scaleY(1);
        -webkit-transform: scaleY(1);
    }
}

@keyframes spin {
  0% {
      transform: rotate(0deg);
  }
  100% {
      transform: rotate(360deg);
  }
}

@keyframes -webkit-spin {
  0% {
      -webkit-transform: rotate(0deg);
  }
  100% {
      -webkit-transform: rotate(360deg);
  }
}

@keyframes cluster-animation{
  0%,100%{    
    @include box-shadow(0px 0px 0px 4px rgba(255,255,255,0.2));
  }
  50%{
    @include box-shadow(0px 0px 0px 9px rgba(255,255,255,0.2));    
  }
}

@keyframes animate{
    0%{        
        @include box-shadow(0 0 0 0 rgba($white,0.2));
    }
    40%{        
        @include box-shadow(0 0 0 30px rgba($white,0));
    }
    80%{
        @include box-shadow(0 0 0 30px rgba($white,0));
    }
    100%{
        @include box-shadow(0 0 0 rgba($white,0));
    }
}